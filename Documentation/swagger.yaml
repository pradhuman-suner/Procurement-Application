swagger: '2.0'
info:
  description: Api Documentation
  version: '1.0'
  title: Api Documentation
  termsOfService: urn:tos
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
host: localhost:8080
basePath: /
tags:
  - name: cart-rest-impl
    description: Cart Rest Impl
  - name: email-controller
    description: Email Controller
  - name: product-rest-impl
    description: Product Rest Impl
  - name: user-rest-impl
    description: User Rest Impl
paths:
  /deleteCart/{id}:
    delete:
      tags:
        - cart-rest-impl
      summary: deletes cart
      description: This Api deletes orders from cart
      operationId: deleteCartUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: string
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /deleteCartByUserId/{userId}:
    delete:
      tags:
        - cart-rest-impl
      summary: deleteCartByUserId
      operationId: deleteCartByUserIdUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: userId
          in: path
          description: userId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: string
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /getById/{id}:
    get:
      tags:
        - user-rest-impl
      summary: gets user by Id
      description: This Api gets all users by Id's
      operationId: getByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /getByUserName/{userName}:
    get:
      tags:
        - user-rest-impl
      summary: Shows users by name
      description: This Api gets all users by their names
      operationId: getByUserNameUsingGET
      produces:
        - '*/*'
      parameters:
        - name: userName
          in: path
          description: userName
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /getCart:
    get:
      tags:
        - cart-rest-impl
      summary: get cart
      description: This Api get cart
      operationId: getCartUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Cart'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /getCartById/{id}:
    get:
      tags:
        - cart-rest-impl
      summary: Register cart
      description: This Api get cart data related to user
      operationId: getCartByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Cart'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /getCartListByUserId/{userId}:
    get:
      tags:
        - cart-rest-impl
      summary: gets cart by user id
      description: This Api gets orders by orderid
      operationId: getCartByUserIDUsingGET
      produces:
        - '*/*'
      parameters:
        - name: userId
          in: path
          description: userId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Cart'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /getCartListTotalByUserId/{userId}:
    get:
      tags:
        - cart-rest-impl
      summary: get total price of cart items by user
      description: This Api Get Total Price Of Cart Items
      operationId: getCartListTotalByUserIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: userId
          in: path
          description: userId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int64
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /getUsers:
    get:
      tags:
        - user-rest-impl
      summary: Shows users
      description: This Api gets all users
      operationId: getUsersUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /login:
    post:
      tags:
        - user-rest-impl
      summary: login
      description: This Api logs in
      operationId: loginUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: userWrapper
          description: userWrapper
          required: true
          schema:
            $ref: '#/definitions/UserWrapper'
      responses:
        '200':
          description: OK
          schema:
            type: object
            additionalProperties:
              type: string
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /product/deleteProduct/{id}:
    delete:
      tags:
        - product-rest-impl
      summary: Delete Product
      description: This Api deletes products
      operationId: deleteProductUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: string
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /product/getProductById/{id}:
    get:
      tags:
        - product-rest-impl
      summary: gets Product by id
      description: This Api gets Products by id's
      operationId: getProductByIdUsingGET
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Product'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /product/getProductByName/{ProductName}:
    get:
      tags:
        - product-rest-impl
      summary: get Product by name
      description: This Api gets products by name
      operationId: getByProductNameUsingGET
      produces:
        - '*/*'
      parameters:
        - name: ProductName
          in: path
          description: ProductName
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Product'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /product/getProducts:
    get:
      tags:
        - product-rest-impl
      summary: gets Products
      description: This Api gets all products
      operationId: getProductsUsingGET
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /product/registerProduct:
    post:
      tags:
        - product-rest-impl
      summary: Register Product
      description: This Api Registers products
      operationId: registerProductUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: Product
          description: Product
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: OK
          schema:
            type: string
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /product/updateProduct/{id}:
    put:
      tags:
        - product-rest-impl
      summary: Update Product
      description: This Api update product
      operationId: updateProductUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int32
        - in: body
          name: Product
          description: Product
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Product'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /product/updateProductThresholdValue/{id}:
    put:
      tags:
        - product-rest-impl
      summary: updateProductThresholdValue
      operationId: updateProductThresholdValueUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int32
        - in: body
          name: Product
          description: Product
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Product'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /product/upload:
    post:
      tags:
        - product-rest-impl
      summary: uploadImage
      operationId: uploadImageUsingPOST
      consumes:
        - multipart/form-data
      produces:
        - '*/*'
      parameters:
        - in: body
          name: imageFile
          description: imageFile
          required: true
          schema:
            type: string
            format: binary
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /registerCart:
    post:
      tags:
        - cart-rest-impl
      summary: Register cart
      description: This Api saves orders to cart
      operationId: registerCartUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: cart
          description: cart
          required: true
          schema:
            $ref: '#/definitions/Cart'
      responses:
        '200':
          description: OK
          schema:
            type: string
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /removeUser:
    delete:
      tags:
        - user-rest-impl
      summary: Deletes users
      description: This Api deletes users by Id's
      operationId: deleteUserUsingDELETE
      produces:
        - '*/*'
      parameters:
        - name: id
          in: query
          description: id
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: string
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /sendEmail:
    post:
      tags:
        - email-controller
      summary: sends email
      description: This Api sends email
      operationId: sendEmailUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: request
          description: request
          required: true
          schema:
            $ref: '#/definitions/EmailRequest'
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /signUp:
    post:
      tags:
        - user-rest-impl
      summary: Sign up user
      description: 'This Api helps user to sign in '
      operationId: signUpUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: request
          description: request
          required: true
          schema:
            $ref: '#/definitions/UserWrapper'
      responses:
        '200':
          description: OK
          schema:
            type: string
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /updateCart/{id}:
    put:
      tags:
        - cart-rest-impl
      summary: update cart
      description: This Api updates orders in cart
      operationId: updateCartUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - in: body
          name: cart
          description: cart
          required: true
          schema:
            $ref: '#/definitions/Cart'
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Cart'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /updateUser/{id}:
    put:
      tags:
        - user-rest-impl
      summary: Upadate users
      description: This Api updates users
      operationId: updateUserUsingPUT
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int32
        - in: body
          name: user
          description: user
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
definitions:
  Cart:
    type: object
    properties:
      id:
        type: integer
        format: int32
      productCategory:
        type: string
      productDescription:
        type: string
      productId:
        type: integer
        format: int32
      productName:
        type: string
      productPrice:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int64
      thresholdValue:
        type: integer
        format: int64
      total:
        type: integer
        format: int64
      userId:
        type: integer
        format: int32
    title: Cart
  EmailRequest:
    type: object
    properties:
      attachment:
        type: string
      message:
        type: string
      subject:
        type: string
      to:
        type: string
    title: EmailRequest
  Product:
    type: object
    properties:
      productCategory:
        type: string
      productDescription:
        type: string
      productId:
        type: integer
        format: int32
      productImage:
        type: string
        format: byte
      productName:
        type: string
      productPrice:
        type: integer
        format: int64
      thresholdValue:
        type: integer
        format: int64
    title: Product
  User:
    type: object
    properties:
      address:
        type: string
      contactNo:
        type: string
      emailId:
        type: string
      firstName:
        type: string
      id:
        type: integer
        format: int32
      lastName:
        type: string
      password:
        type: string
      role:
        type: string
      userName:
        type: string
    title: User
  UserWrapper:
    type: object
    properties:
      address:
        type: string
      contactNo:
        type: string
      emailId:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      role:
        type: string
      userName:
        type: string
    title: UserWrapper
